[tool.poetry]
name = "pay-admin"
version = "0.1.0"
description = ""
authors = ["Pay Team"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
flask = "^3.0.2"
flask-admin = "^1.6.1"
flask-oidc = "^2.1.1"
httplib2 = "^0.22.0"
python-dotenv = "^1.0.1"
requests = "^2.31.0"
requests-futures = "^1.0.1"
wtforms = "^3.1.2"
werkzeug = "^3.0.1"
itsdangerous = "^2.1.2"
jinja2 = "^3.1.3"
pay-api = { git = "https://github.com/seeker25/sbc-pay.git", branch = "30833", subdirectory = "pay-api" }
flask-session = {extras = ["filesystem"], version = "^0.8.0"}
ruff = "^0.14.1"


[tool.poetry.group.dev.dependencies]
pytest = "^8.1.1"
pytest-mock = "^3.12.0"
requests = "^2.31.0"
pyhamcrest = "^2.1.0"
pytest-cov = "^4.1.0"
freezegun = "^1.4.0"
coverage = "^7.4.3"
pydocstyle = "^6.3.0"
[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "devops",
    ".history",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
select = [
    "E4",      # pycodestyle errors
    "E7",      # pycodestyle errors  
    "E9",      # pycodestyle errors
    "F",       # pyflakes
    "W",       # pycodestyle warnings
    "B",       # flake8-bugbear
    "C4",      # flake8-comprehensions
    "UP",      # pyupgrade
    "ARG",     # unused-function-argument
    "D",       # pydocstyle
    "I",       # isort
    "N",       # pep8-naming
    "Q",       # flake8-quotes
    "S",       # flake8-bandit
    "T",       # flake8-type-checking
    "TCH",     # flake8-type-checking
    "TID",     # flake8-tidy-imports
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*.py" = ["PLR2004", "S101", "TID252", "ARG001", "B006", "B008", "S311", "T201"]
# Allow magic values in tests
"**/test_*.py" = ["PLR2004", "S101", "TID252", "ARG001", "B006", "B008", "S311", "T201"]
# Allow magic values in conftest.py
"conftest.py" = ["PLR2004", "S101", "TID252", "ARG001", "B006", "B008", "S311", "T201"]
# Allow magic values in migrations
"migrations/**/*.py" = ["PLR2004", "S101", "TID252"]
# Allow magic values in devops
"devops/**/*.py" = ["PLR2004", "S101", "TID252"]
# Allow unused imports in __init__.py
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["pay_api"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
asyncio_mode = "auto"
minversion = "2.0"
testpaths = [
   "tests",
]
addopts = "--verbose --strict -p no:warnings --cov=src --cov-report html:htmlcov --cov-report xml:coverage.xml"
python_files = [
   "test*.py"
]
norecursedirs = [
   ".git", ".tox", "venv*", "requirements*", "build",
]
log_cli = true
log_cli_level = "1"
filterwarnings = [
   "ignore::UserWarning"
]
markers = [
   "slow",
   "serial",
]

[tool.coverage.run]
branch = true
source = [
   "src/auth_api",
]
omit = [
    "wsgi.py",
    "gunicorn_config.py"
]

[tool.coverage.report]
exclude_lines = [
   "pragma: no cover",
   "from",
   "import",
   "def __repr__",
   "if self.debug:",
   "if settings.DEBUG",
   "raise AssertionError",
   "raise NotImplementedError",
   "if 0:",
   'if __name__ == "__main__":',
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
