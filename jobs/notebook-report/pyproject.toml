[tool.poetry]
name = "notebook-report"
version = "0.1.0"
description = ""
authors = ["Travis Semple <travis8814@gmail.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
jupyter = "^1.1.1"
sqlalchemy = "^2.0.36"
psycopg2-binary = "^2.9.10"
ipython-sql = "^0.5.0"
simplejson = "^3.19.3"
pandas = "^2.2.3"
matplotlib = "^3.9.3"
spacy = "^3.8.2"
papermill = "^2.6.0"
schedule = "^1.2.2"
attrs = "^24.2.0"
df2gspread = "^1.0.4"
future = "^1.0.0"
gspread = "^6.1.4"
jinja2 = "^3.1.6"
markupsafe = "^3.0.2"
python-dateutil = "^2.9.0.post0"
pytz = "^2024.2"
importlib-metadata = "^8.5.0"
itsdangerous = "^2.2.0"
jsonschema = "^4.23.0"
more-itertools = "^10.5.0"
six = "^1.17.0"
pyrsistent = "^0.20.0"
flask = "^3.1.1"
click = "^8.1.7"
python-dotenv = "^1.0.1"
requests = "^2.32.4"
marshmallow = "^3.23.1"
werkzeug = "^3.1.3"
certifi = "^2024.8.30"
urllib3 = "^2.5.0"
idna = "^3.10"


[tool.poetry.group.dev.dependencies]
pytest = "^8.3.4"
flake8 = "^7.1.1"
flake8-blind-except = "^0.2.1"
flake8-debugger = "^4.1.2"
flake8-docstrings = "^1.7.0"
flake8-isort = "^6.1.1"
flake8-quotes = "^3.4.0"
pep8-naming = "^0.14.1"
pylint = "^3.3.2"
pylint-flask = "^0.6"
pep8 = "^1.7.1"
autopep8 = "^2.3.1"
coverage = "^7.6.9"
black = {extras = ["jupyter"], version = "^24.10.0"}
flake8-pyproject = "^1.2.3"

[tool.flake8]
ignore = ["F401","E402", "Q000", "E203", "W503"]
exclude = [
    ".venv",
    "./venv",
    ".git",
    ".history",
    "devops",
    "*migrations*",
]
per-file-ignores = [
    "__init__.py:F401",
    "*.py:B902"
]
max-line-length = 120
docstring-min-length=10
count = true

[tool.zimports]
black-line-length = 120
keep-unused-type-checking = true

[tool.black]
target-version =  ["py310", "py311", "py312"]
line-length = 120
include = '\.pyi?$'
extend-exclude = '''
/(
  # The following are specific to Black, you probably don't want those.
  migrations
  | devops
  | .history
  | lib
)/
'''

[tool.isort]
atomic = true
profile = "black"
line_length = 120
skip_gitignore = true
skip_glob = ["migrations", "devops"]

[tool.pylint.main]
fail-under = 10
max-line-length = 120
ignore = [ "migrations", "devops", "tests"]
ignore-patterns = ["^\\.#"]
ignored-modules= ["flask_sqlalchemy", "sqlalchemy", "SQLAlchemy" , "alembic", "scoped_session"]
ignored-classes= "scoped_session"
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
extension-pkg-whitelist = "pydantic"
notes = ["FIXME","XXX","TODO"]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]
disable = "C0209,C0301,W0511,W0613,W0703,W1514,W1203,R0801,R0902,R0903,R0911,R0401,R1705,R1718,W3101"
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
function-naming-style = "snake_case"
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "any"
variable-naming-style = "snake_case"
docstring-min-length = -1
good-names = ["i", "j", "k", "ex", "Run", "_"]
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
defining-attr-methods = ["__init__", "__new__", "setUp", "asyncSetUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make", "os._exit"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
minversion = "2.0"
testpaths = [
   "tests",
]
addopts = "--verbose --strict -p no:warnings --cov=src --cov-report html:htmlcov --cov-report xml:coverage.xml"
python_files = [
   "test*.py"
]
norecursedirs = [
   ".git", ".tox", "venv*", "requirements*", "build",
]
log_cli = true
log_cli_level = "1"
filterwarnings = [
   "ignore::UserWarning"
]
markers = [
   "slow",
   "serial",
]

[tool.coverage.run]
branch = true
source = [
   ".",
]
omit = [
    "wsgi.py",
    "gunicorn_config.py"
]

[tool.coverage.report]
exclude_lines = [
   "pragma: no cover",
   "from",
   "import",
   "def __repr__",
   "if self.debug:",
   "if settings.DEBUG",
   "raise AssertionError",
   "raise NotImplementedError",
   "if 0:",
   'if __name__ == "__main__":',
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
