"""add_created_user_display_names

Revision ID: 8eac44955fb6
Revises: 5f7df60469fa
Create Date: 2020-04-08 12:15:06.484296

"""

import base64
import re

import sqlalchemy as sa
from alembic import op
from flask import current_app

from pay_api.models.invoice import Invoice
from pay_api.models.payment import Payment
from pay_api.services.oauth_service import OAuthService
from pay_api.utils.enums import AuthHeaderType, ContentType


# revision identifiers, used by Alembic.
revision = "8eac44955fb6"
down_revision = "5f7df60469fa"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "invoice", sa.Column("created_name", sa.String(length=100), nullable=True)
    )
    op.add_column(
        "invoice", sa.Column("updated_name", sa.String(length=100), nullable=True)
    )
    op.add_column(
        "payment", sa.Column("created_name", sa.String(length=100), nullable=True)
    )
    op.add_column(
        "payment", sa.Column("updated_name", sa.String(length=100), nullable=True)
    )

    # Check if there are records in payment or invoice table to update names
    conn = op.get_bind()
    res = conn.execute(sa.text(f"select id from payment;"))
    pay_results = res.fetchall()
    res = conn.execute(sa.text(f"select id from invoice;"))
    inv_results = res.fetchall()

    if len(pay_results) > 0 or len(inv_results) > 0:
        # Now call Keycloak API and update the names for existing record

        config = current_app.config
        issuer_url = config.get("JWT_OIDC_ISSUER")

        token_url = (
            issuer_url + "/protocol/openid-connect/token"
        )  # https://sso-dev.pathfinder.gov.bc.ca/auth/realms/fcf0kpqr/protocol/openid-connect/token
        basic_auth_encoded = base64.b64encode(
            bytes(
                config.get("KEYCLOAK_SERVICE_ACCOUNT_ID")
                + ":"
                + config.get("KEYCLOAK_SERVICE_ACCOUNT_SECRET"),
                "utf-8",
            )
        ).decode("utf-8")
        data = "grant_type=client_credentials"
        token_response = OAuthService.post(
            token_url,
            basic_auth_encoded,
            AuthHeaderType.BASIC,
            ContentType.FORM_URL_ENCODED,
            data,
        )
        token = token_response.json().get("access_token")

        get_users_url = (
            issuer_url.replace("/auth/", "/auth/admin/") + "/users?max=999999999"
        )
        get_users_response = OAuthService.get(
            get_users_url, token, AuthHeaderType.BEARER, ContentType.JSON
        )
        for user in get_users_response.json():
            if user.get("firstName", None) or user.get("lastName", None):
                user_name = user["username"].lower()
                display_name = (
                    user.get("firstName", "") + " " + user.get("lastName", "")
                )
                op.execute(
                    f"update payment set created_name = '{display_name}'  where lower(created_by) = '{user_name}'"
                )
                op.execute(
                    f"update payment set updated_name = '{display_name}'  where lower(updated_by) = '{user_name}'"
                )
                op.execute(
                    f"update invoice set created_name = '{display_name}'  where lower(created_by) = '{user_name}'"
                )
                op.execute(
                    f"update invoice set updated_name = '{display_name}'  where lower(updated_by) = '{user_name}'"
                )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("payment", "updated_name")
    op.drop_column("payment", "created_name")
    op.drop_column("invoice", "updated_name")
    op.drop_column("invoice", "created_name")
    # ### end Alembic commands ###
