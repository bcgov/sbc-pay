"""variable_fee_code

Revision ID: 5d9997f7e649
Revises: cdd2ce690303
Create Date: 2021-11-22 13:47:57.469953

"""
from datetime import date

import sqlalchemy as sa
from alembic import op
from sqlalchemy import Date, String, Boolean, Float
from sqlalchemy.sql import column, table

# revision identifiers, used by Alembic.
revision = '5d9997f7e649'
down_revision = 'cdd2ce690303'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('fee_schedules',
                  sa.Column('variable', sa.Boolean(), nullable=True, comment='Flag to indicate if the fee is variable'))
    op.alter_column('payment_line_items', 'fee_schedule_id',
                    existing_type=sa.INTEGER(),
                    nullable=False)

    distribution_code_link_table = table('distribution_code_links',
                                         column('distribution_code_id', String),
                                         column('fee_schedule_id', String)
                                         )
    filing_type_table = table('filing_types',
                              column('code', String),
                              column('description', String)
                              )
    fee_codes_table = table('fee_codes',
                            column('code', String),
                            column('amount', Float)
                            )
    fee_schedule_table = table('fee_schedules',
                               column('filing_type_code', String),
                               column('corp_type_code', String),
                               column('fee_code', String),
                               column('fee_start_date', Date),
                               column('fee_end_date', Date),
                               column('service_fee_code', String),
                               column('variable', Boolean)
                               )

    op.bulk_insert(
        filing_type_table,
        [
            {'code': 'CSBVFEE', 'description': 'CSB Filing'},
            {'code': 'CSBSRCH', 'description': 'CSB File Search'},
            {'code': 'CSBPDOC', 'description': 'CSB Document Requisition'},
            {'code': 'CSCRMTFC', 'description': 'CSB Criminal Search'}
        ]
    )

    op.bulk_insert(
        fee_codes_table,
        [
            {
                'code': 'EN115',
                'amount': 6
            }
        ]
    )

    op.bulk_insert(
        fee_schedule_table,
        [
            {
                'filing_type_code': 'CSBVFEE',
                'corp_type_code': 'CSO',
                'fee_code': 'EN107',
                'fee_start_date': date.today(),
                'fee_end_date': None,
                'service_fee_code': None,
                'variable': True
            },
            {
                'filing_type_code': 'CSBSRCH',
                'corp_type_code': 'CSO',
                'fee_code': 'EN115',
                'fee_start_date': date.today(),
                'fee_end_date': None,
                'service_fee_code': None,
                'variable': False
            },
            {
                'filing_type_code': 'CSBPDOC',
                'corp_type_code': 'CSO',
                'fee_code': 'EN114',
                'fee_start_date': date.today(),
                'fee_end_date': None,
                'service_fee_code': None,
                'variable': False
            },
            {
                'filing_type_code': 'CSCRMTFC',
                'corp_type_code': 'CSO',
                'fee_code': 'EN107',
                'fee_start_date': date.today(),
                'fee_end_date': None,
                'service_fee_code': None,
                'variable': False
            }
        ]
    )

    # Now find out the distribution code for other CSBFILE and map it to them.
    distribution_code_id_query = "select dc.distribution_code_id from distribution_codes dc " \
                                 "where upper(dc.name) = upper('Courts Online') " \
                                 "and dc.start_date <= CURRENT_DATE " \
                                 "and (dc.end_date is null or dc.end_date > CURRENT_DATE)"
    conn = op.get_bind()
    res = conn.execute(distribution_code_id_query)
    if (res_fetch := res.fetchall()) and res_fetch[0]:
        distribution_code_id = res_fetch[0][0]
        res = conn.execute(
            "select fee_schedule_id from fee_schedules where corp_type_code='CSO' and "
            "filing_type_code in ('CSBVFEE', 'CSBSRCH', 'CSBPDOC', 'CSCRMTFC')")

        distr_code_links = []
        for result in res.fetchall():
            fee_schedule_id = result[0]
            distr_code_links.append({
                'distribution_code_id': distribution_code_id,
                'fee_schedule_id': fee_schedule_id
            })
        op.bulk_insert(distribution_code_link_table, distr_code_links)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('payment_line_items', 'fee_schedule_id',
                    existing_type=sa.INTEGER(),
                    nullable=True)
    op.drop_column('fee_schedules', 'variable')

    op.execute(
        "DELETE FROM distribution_code_links WHERE fee_schedule_id in (select fee_schedule_id from fee_schedules where "
        "filing_type_code in ('CSBVFEE', 'CSBSRCH', 'CSBPDOC', 'CSCRMTFC'))")
    op.execute(
        "DELETE FROM fee_schedules WHERE filing_type_code in ('CSBVFEE', 'CSBSRCH', 'CSBPDOC', 'CSCRMTFC')")
    op.execute(
        "DELETE FROM filing_types WHERE code in ('CSBVFEE', 'CSBSRCH', 'CSBPDOC', 'CSCRMTFC')")

    op.execute(
        "DELETE FROM fee_codes WHERE code in ('EN115', )")

    # ### end Alembic commands ###
