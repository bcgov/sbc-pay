"""incorporation_fee_codes

Revision ID: c67213f860ea
Revises: 9c8a93ba9da2
Create Date: 2021-06-10 14:20:33.590691

"""

from datetime import datetime, timezone

from alembic import op
from sqlalchemy import Date, String, Boolean, text, Integer
from sqlalchemy.sql import column, table

# revision identifiers, used by Alembic.
revision = "c67213f860ea"
down_revision = "9c8a93ba9da2"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    corp_type_table = table(
        "corp_types",
        column("code", String),
        column("description", String),
        column("product", String),
        column("is_online_banking_allowed", Boolean),
        column("bcol_fee_code", String),
        column("bcol_staff_fee_code", String),
    )
    distribution_code_link_table = table(
        "distribution_code_links",
        column("distribution_code_id", Integer),
        column("fee_schedule_id", Integer),
    )
    fee_schedule_table = table(
        "fee_schedules",
        column("filing_type_code", String),
        column("corp_type_code", String),
        column("fee_code", String),
        column("fee_start_date", Date),
        column("fee_end_date", Date),
        column("future_effective_fee_code", String),
        column("priority_fee_code", String),
        column("service_fee_code", String),
    )

    op.bulk_insert(
        corp_type_table,
        [
            {
                "code": "LTD",
                "description": "Limited companies",
                "product": "BUSINESS",
                "is_online_banking_allowed": True,
                "bcol_fee_code": "BBCOMVC1",
                "bcol_staff_fee_code": "CBCOMVC1",
            },
            {
                "code": "CCC",
                "description": "Community Contribution Companies",
                "product": "BUSINESS",
                "is_online_banking_allowed": True,
                "bcol_fee_code": "BBCOMVC1",
                "bcol_staff_fee_code": "CBCOMVC1",
            },
        ],
    )

    op.bulk_insert(
        fee_schedule_table,
        [
            {
                "filing_type_code": "BCINC",
                "corp_type_code": "LTD",
                "fee_code": "EN109",
                "fee_start_date": datetime.now(tz=timezone.utc),
                "fee_end_date": None,
                "future_effective_fee_code": "FUT01",
                "priority_fee_code": "PRI01",
                "service_fee_code": "TRF01",
            },
            {
                "filing_type_code": "BCINC",
                "corp_type_code": "BC",
                "fee_code": "EN109",
                "fee_start_date": datetime.now(tz=timezone.utc),
                "fee_end_date": None,
                "future_effective_fee_code": "FUT01",
                "priority_fee_code": "PRI01",
                "service_fee_code": "TRF01",
            },
            {
                "filing_type_code": "BCINC",
                "corp_type_code": "CCC",
                "fee_code": "EN109",
                "fee_start_date": datetime.now(tz=timezone.utc),
                "fee_end_date": None,
                "future_effective_fee_code": "FUT01",
                "priority_fee_code": "PRI01",
                "service_fee_code": "TRF01",
            },
            {
                "filing_type_code": "BCINC",
                "corp_type_code": "ULC",
                "fee_code": "EN113",
                "fee_start_date": datetime.now(tz=timezone.utc),
                "fee_end_date": None,
                "future_effective_fee_code": "FUT01",
                "priority_fee_code": "PRI01",
                "service_fee_code": "TRF01",
            },
        ],
    )
    # Now find out the distribution code for other BCINC and map it to them.
    # Causing errors:
    # distribution_code_id_query = "select dc.distribution_code_id from fee_schedules fs " \
    #                              "left join distribution_code_links dcl on fs.fee_schedule_id=dcl.fee_schedule_id " \
    #                              "left join distribution_codes dc on dc.distribution_code_id = dcl.distribution_code_id " \
    #                              "where fs.filing_type_code = 'BCINC' and dc.start_date <= CURRENT_DATE " \
    #                              "and (dc.end_date is null or dc.end_date > CURRENT_DATE)"
    # conn = op.get_bind()
    # res = conn.execute(text(distribution_code_id_query))
    # distribution_code_id = res.fetchall()[0][0]
    # new_codes = ('CCC', 'ULC', 'LTD', 'BC')
    # distr_code_link_values = []
    # for new_code in new_codes:
    #     res = conn.execute(
    #         text(f"select fee_schedule_id from fee_schedules where corp_type_code='{new_code}' and filing_type_code='BCINC'"))
    #     fee_schedule_id = res.fetchall()[0][0]
    #     distr_code_link_values.append({
    #         'distribution_code_id': distribution_code_id,
    #         'fee_schedule_id': fee_schedule_id
    #     })
    # op.bulk_insert(distribution_code_link_table, distr_code_link_values)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(
        "DELETE FROM distribution_code_links where fee_schedule_id in (select fee_schedule_id from fee_schedules where filing_type_code='BCINC' and corp_type_code in ('CCC', 'ULC', 'LTD', 'BC'))"
    )
    op.execute(
        "DELETE FROM fee_schedules WHERE filing_type_code='BCINC' and corp_type_code in ('CCC', 'ULC', 'LTD', 'BC')"
    )
    op.execute("DELETE FROM corp_types WHERE code in ('CCC', 'LTD')")
    # ### end Alembic commands ###
