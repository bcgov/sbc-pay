[tool.poetry]
name = "bcol-api"
version = "0.1.0"
description = ""
authors = ["BC Registries"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
sbc-common-components = {git = "https://github.com/bcgov/sbc-common-components.git", subdirectory = "python"}
gunicorn = "^23.0.0"
flask = "^3.0.2"
flask-script = "^2.0.6"
flask-moment = "^1.0.5"
flask-restx = "^1.3.0"
python-dotenv = "^1.0.1"
psycopg2-binary = "^2.9.9"
jsonschema = "4.17.3"
requests = "^2.32.4"
zeep = "^4.2.1"
python-ldap = "^3.4.4"
attrs = "^23.2.0"
werkzeug = "^3.0.1"
jaeger-client = "^4.8.0"
pycountry = "^23.12.11"
itsdangerous = "^2.1.2"
jinja2 = "^3.1.6"
flask-jwt-oidc = {git = "https://github.com/seeker25/flask-jwt-oidc.git", branch="main"}

[tool.poetry.group.dev.dependencies]
pytest = "^8.1.1"
pytest-mock = "^3.12.0"
requests = "^2.32.4"
pyhamcrest = "^2.1.0"
pytest-cov = "^4.1.0"
flake8 = "^7.0.0"
flake8-blind-except = "^0.2.1"
flake8-debugger = "^4.1.2"
flake8-docstrings = "^1.7.0"
flake8-isort = "^6.1.1"
flake8-quotes = "^3.4.0"
pep8-naming = "^0.13.3"
autopep8 = "^2.0.4"
coverage = "^7.4.3"
pylint = "^3.1.0"
pylint-flask = "^0.6"
pydocstyle = "^6.3.0"
lovely-pytest-docker = "^0.3.1"
isort = "^5.13.2"
black = "^24.10.0"
flake8-pyproject = "^1.2.3"

[tool.flake8]
ignore = ["F401","E402", "Q000", "E203", "W503"]
exclude = [
    ".venv",
    "./venv",
    ".git",
    ".history",
    "devops",
    "*migrations*",
]
per-file-ignores = [
    "__init__.py:F401",
    "*.py:B902"
]
max-line-length = 120
docstring-min-length=10
count = true

[tool.zimports]
black-line-length = 120
keep-unused-type-checking = true

[tool.black]
target-version =  ["py310", "py311", "py312"]
line-length = 120
include = '\.pyi?$'
extend-exclude = '''
/(
  # The following are specific to Black, you probably don't want those.
  migrations
  | devops
  | .history
)/
'''

[tool.isort]
atomic = true
profile = "black"
line_length = 120
skip_gitignore = true
skip_glob = ["migrations", "devops"]

[tool.pylint.main]
fail-under = 10
max-line-length = 120
ignore = [ "migrations", "devops", "tests"]
ignore-patterns = ["^\\.#"]
ignored-modules= ["flask_sqlalchemy", "sqlalchemy", "SQLAlchemy" , "alembic", "scoped_session"]
ignored-classes= "scoped_session"
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
extension-pkg-whitelist = "pydantic"
notes = ["FIXME","XXX","TODO"]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]
disable = "C0209,C0301,W0511,W0613,W0703,W1514,W1203,R0801,R0902,R0903,R0911,R0401,R1705,R1718,W3101"
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
function-naming-style = "snake_case"
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "any"
variable-naming-style = "snake_case"
docstring-min-length = -1
good-names = ["i", "j", "k", "ex", "Run", "_"]
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
defining-attr-methods = ["__init__", "__new__", "setUp", "asyncSetUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make", "os._exit"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
minversion = "2.0"
testpaths = [
   "tests",
]
addopts = "--verbose --strict -p no:warnings --cov=src --cov-report html:htmlcov --cov-report xml:coverage.xml"
python_files = [
   "test*.py"
]
norecursedirs = [
   ".git", ".tox", "venv*", "requirements*", "build",
]
log_cli = true
log_cli_level = "1"
filterwarnings = [
   "ignore::UserWarning"
]
markers = [
   "slow",
   "serial",
]

[tool.coverage.run]
branch = true
source = [
   "src/auth_api",
]
omit = [
    "wsgi.py",
    "gunicorn_config.py"
]

[tool.coverage.report]
exclude_lines = [
   "pragma: no cover",
   "from",
   "import",
   "def __repr__",
   "if self.debug:",
   "if settings.DEBUG",
   "raise AssertionError",
   "raise NotImplementedError",
   "if 0:",
   'if __name__ == "__main__":',
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
